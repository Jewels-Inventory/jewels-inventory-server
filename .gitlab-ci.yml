stages:
  - lint
  - build-angular
  - build-golang
  - deploy

lint-angular:
  image: library/node:latest
  stage: lint
  variables:
    ANGULAR_DIR: $CI_PROJECT_DIR/frontend
  script:
    - cd $ANGULAR_DIR
    - npm install -f
    - npm run lint

build-angular:
  image: library/node:latest
  stage: build-angular
  variables:
    ANGULAR_DIR: $CI_PROJECT_DIR/frontend
  script:
    - cd $ANGULAR_DIR
    - npm install -f
    - npm run build
  artifacts:
    paths:
      - $ANGULAR_DIR/dist

build:
  image: library/golang:1.23-alpine
  stage: build-golang
  before_script:
    - apk add npm
  script:
    - go vet .
    - go build -o $CI_PROJECT_DIR/jewels
  artifacts:
    paths:
      - $CI_PROJECT_DIR/jewels

docker-build-test:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    pull_policy: always
    entrypoint: [""]
  before_script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"https://index.docker.io/v1/\":{\"auth\":\"$DOCKER_TOKEN\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --no-push
  rules:
    - if: $CI_COMMIT_BRANCH

docker-build:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    pull_policy: always
    entrypoint: [""]
  before_script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"https://index.docker.io/v1/\":{\"auth\":\"$DOCKER_TOKEN\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/${ARCH}:${CI_COMMIT_TAG}"
      --destination "${CI_REGISTRY_IMAGE}/${ARCH}:latest"
  rules:
    - if: $CI_COMMIT_TAG
  parallel:
    matrix:
      - ARCH: amd64
      - ARCH: arm64
  tags:
    - runner-${ARCH}

merge-manifests:
  stage: deploy
  needs:
    - job: docker-build
      artifacts: false
  image:
    name: mplatform/manifest-tool:alpine
    entrypoint: [""]
  script:
    - >-
      manifest-tool
      --username=${CI_REGISTRY_USER}
      --password=${CI_REGISTRY_PASSWORD}
      push from-args
      --platforms linux/amd64,linux/arm64
      --template ${CI_REGISTRY_IMAGE}/ARCH:${TAG}
      --target ${CI_REGISTRY_IMAGE}:${TAG}
  parallel:
    matrix:
      - TAG: latest
      - TAG: $CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG

variables:
  JEKYLL_ENV: production
  LC_ALL: C.UTF-8
