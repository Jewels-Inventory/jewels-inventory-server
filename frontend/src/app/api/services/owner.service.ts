/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createNewDeviceForOwner } from '../fn/owner/create-new-device-for-owner';
import { CreateNewDeviceForOwner$Params } from '../fn/owner/create-new-device-for-owner';
import { deleteJewelByOwner } from '../fn/owner/delete-jewel-by-owner';
import { DeleteJewelByOwner$Params } from '../fn/owner/delete-jewel-by-owner';
import { Device } from '../models/device';
import { getAllOwners } from '../fn/owner/get-all-owners';
import { GetAllOwners$Params } from '../fn/owner/get-all-owners';
import { getJewelByOwner } from '../fn/owner/get-jewel-by-owner';
import { GetJewelByOwner$Params } from '../fn/owner/get-jewel-by-owner';
import { getJewelsByOwner } from '../fn/owner/get-jewels-by-owner';
import { GetJewelsByOwner$Params } from '../fn/owner/get-jewels-by-owner';
import { Owner } from '../models/owner';
import { updateJewelByOwner } from '../fn/owner/update-jewel-by-owner';
import { UpdateJewelByOwner$Params } from '../fn/owner/update-jewel-by-owner';

/**
 * Owner
 */
@Injectable({ providedIn: 'root' })
export class OwnerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllOwners()` */
  static readonly GetAllOwnersPath = '/api/admin/owner';

  /**
   * Gets all owners.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOwners()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOwners$Response(
    params?: GetAllOwners$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Array<Owner>>> {
    return getAllOwners(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets all owners.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOwners$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOwners(params?: GetAllOwners$Params, context?: HttpContext): Observable<Array<Owner>> {
    return this.getAllOwners$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Owner>>): Array<Owner> => r.body)
    );
  }

  /** Path part for operation `getJewelsByOwner()` */
  static readonly GetJewelsByOwnerPath = '/api/admin/owner/{ownerId}/device';

  /**
   * Gets jewels by owner.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getJewelsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJewelsByOwner$Response(
    params: GetJewelsByOwner$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Array<Device>>> {
    return getJewelsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets jewels by owner.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getJewelsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJewelsByOwner(params: GetJewelsByOwner$Params, context?: HttpContext): Observable<Array<Device>> {
    return this.getJewelsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Device>>): Array<Device> => r.body)
    );
  }

  /** Path part for operation `createNewDeviceForOwner()` */
  static readonly CreateNewDeviceForOwnerPath = '/api/admin/owner/{ownerId}/device';

  /**
   * Creates a new jewel for the onwer.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createNewDeviceForOwner()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNewDeviceForOwner$Response(
    params: CreateNewDeviceForOwner$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Device>> {
    return createNewDeviceForOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new jewel for the onwer.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createNewDeviceForOwner$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNewDeviceForOwner(params: CreateNewDeviceForOwner$Params, context?: HttpContext): Observable<Device> {
    return this.createNewDeviceForOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<Device>): Device => r.body)
    );
  }

  /** Path part for operation `getJewelByOwner()` */
  static readonly GetJewelByOwnerPath = '/api/admin/owner/{ownerId}/device/{deviceId}';

  /**
   * Get jewel by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getJewelByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJewelByOwner$Response(
    params: GetJewelByOwner$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Device>> {
    return getJewelByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * Get jewel by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getJewelByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJewelByOwner(params: GetJewelByOwner$Params, context?: HttpContext): Observable<Device> {
    return this.getJewelByOwner$Response(params, context).pipe(map((r: StrictHttpResponse<Device>): Device => r.body));
  }

  /** Path part for operation `updateJewelByOwner()` */
  static readonly UpdateJewelByOwnerPath = '/api/admin/owner/{ownerId}/device/{deviceId}';

  /**
   * Update the given jewel.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateJewelByOwner()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateJewelByOwner$Response(
    params: UpdateJewelByOwner$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<void>> {
    return updateJewelByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * Update the given jewel.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateJewelByOwner$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateJewelByOwner(params: UpdateJewelByOwner$Params, context?: HttpContext): Observable<void> {
    return this.updateJewelByOwner$Response(params, context).pipe(map((r: StrictHttpResponse<void>): void => r.body));
  }

  /** Path part for operation `deleteJewelByOwner()` */
  static readonly DeleteJewelByOwnerPath = '/api/admin/owner/{ownerId}/device/{deviceId}';

  /**
   * Delete the given jewel.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteJewelByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteJewelByOwner$Response(
    params: DeleteJewelByOwner$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<void>> {
    return deleteJewelByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete the given jewel.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteJewelByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteJewelByOwner(params: DeleteJewelByOwner$Params, context?: HttpContext): Observable<void> {
    return this.deleteJewelByOwner$Response(params, context).pipe(map((r: StrictHttpResponse<void>): void => r.body));
  }
}
