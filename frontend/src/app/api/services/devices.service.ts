/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDeviceTypePost } from '../fn/devices/api-device-type-post';
import { ApiDeviceTypePost$Params } from '../fn/devices/api-device-type-post';
import { Device } from '../models/device';
import { getAllDevices } from '../fn/devices/get-all-devices';
import { GetAllDevices$Params } from '../fn/devices/get-all-devices';

/**
 * Devices
 */
@Injectable({ providedIn: 'root' })
export class DevicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDeviceTypePost()` */
  static readonly ApiDeviceTypePostPath = '/api/device/{type}';

  /**
   * Send the automatic device information
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDeviceTypePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiDeviceTypePost$Response(
    params: ApiDeviceTypePost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<void>> {
    return apiDeviceTypePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Send the automatic device information
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDeviceTypePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiDeviceTypePost(params: ApiDeviceTypePost$Params, context?: HttpContext): Observable<void> {
    return this.apiDeviceTypePost$Response(params, context).pipe(map((r: StrictHttpResponse<void>): void => r.body));
  }

  /** Path part for operation `getAllDevices()` */
  static readonly GetAllDevicesPath = '/api/admin/device';

  /**
   * Jewels of all owners.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDevices()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDevices$Response(
    params?: GetAllDevices$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Array<Device>>> {
    return getAllDevices(this.http, this.rootUrl, params, context);
  }

  /**
   * Jewels of all owners.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDevices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDevices(params?: GetAllDevices$Params, context?: HttpContext): Observable<Array<Device>> {
    return this.getAllDevices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Device>>): Array<Device> => r.body)
    );
  }
}
