/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMyJewel } from '../fn/my-jewels/create-my-jewel';
import { CreateMyJewel$Params } from '../fn/my-jewels/create-my-jewel';
import { deleteMyJewel } from '../fn/my-jewels/delete-my-jewel';
import { DeleteMyJewel$Params } from '../fn/my-jewels/delete-my-jewel';
import { Device } from '../models/device';
import { getMyJewel } from '../fn/my-jewels/get-my-jewel';
import { GetMyJewel$Params } from '../fn/my-jewels/get-my-jewel';
import { getMyJewels } from '../fn/my-jewels/get-my-jewels';
import { GetMyJewels$Params } from '../fn/my-jewels/get-my-jewels';
import { updateMyJewel } from '../fn/my-jewels/update-my-jewel';
import { UpdateMyJewel$Params } from '../fn/my-jewels/update-my-jewel';

/**
 * My Jewels
 */
@Injectable({ providedIn: 'root' })
export class MyJewelsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMyJewels()` */
  static readonly GetMyJewelsPath = '/api/my-jewel';

  /**
   * My Jewels.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyJewels()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyJewels$Response(
    params?: GetMyJewels$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Array<Device>>> {
    return getMyJewels(this.http, this.rootUrl, params, context);
  }

  /**
   * My Jewels.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyJewels$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyJewels(params?: GetMyJewels$Params, context?: HttpContext): Observable<Array<Device>> {
    return this.getMyJewels$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Device>>): Array<Device> => r.body)
    );
  }

  /** Path part for operation `createMyJewel()` */
  static readonly CreateMyJewelPath = '/api/my-jewel';

  /**
   * Create new jewel.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMyJewel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMyJewel$Response(params?: CreateMyJewel$Params, context?: HttpContext): Observable<StrictHttpResponse<Device>> {
    return createMyJewel(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new jewel.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMyJewel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMyJewel(params?: CreateMyJewel$Params, context?: HttpContext): Observable<Device> {
    return this.createMyJewel$Response(params, context).pipe(map((r: StrictHttpResponse<Device>): Device => r.body));
  }

  /** Path part for operation `getMyJewel()` */
  static readonly GetMyJewelPath = '/api/my-jewel/{id}';

  /**
   * Get jewel by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyJewel()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyJewel$Response(params: GetMyJewel$Params, context?: HttpContext): Observable<StrictHttpResponse<Device>> {
    return getMyJewel(this.http, this.rootUrl, params, context);
  }

  /**
   * Get jewel by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyJewel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyJewel(params: GetMyJewel$Params, context?: HttpContext): Observable<Device> {
    return this.getMyJewel$Response(params, context).pipe(map((r: StrictHttpResponse<Device>): Device => r.body));
  }

  /** Path part for operation `updateMyJewel()` */
  static readonly UpdateMyJewelPath = '/api/my-jewel/{id}';

  /**
   * Update the given jewel.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMyJewel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMyJewel$Response(params: UpdateMyJewel$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateMyJewel(this.http, this.rootUrl, params, context);
  }

  /**
   * Update the given jewel.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMyJewel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMyJewel(params: UpdateMyJewel$Params, context?: HttpContext): Observable<void> {
    return this.updateMyJewel$Response(params, context).pipe(map((r: StrictHttpResponse<void>): void => r.body));
  }

  /** Path part for operation `deleteMyJewel()` */
  static readonly DeleteMyJewelPath = '/api/my-jewel/{id}';

  /**
   * Delete the given jewel.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMyJewel()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMyJewel$Response(params: DeleteMyJewel$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMyJewel(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete the given jewel.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMyJewel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMyJewel(params: DeleteMyJewel$Params, context?: HttpContext): Observable<void> {
    return this.deleteMyJewel$Response(params, context).pipe(map((r: StrictHttpResponse<void>): void => r.body));
  }
}
